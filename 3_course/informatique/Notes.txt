• Librairie < framework < package < class < objet

• lettre(char) > mot(word) > phrase(doubleword) > mémo(longword)
• instruction , expression, opération, opérateur


printf("L'adresse de la variable age est : %p", &age);

Comme notre pointeur pointeurSurAge va contenir l'adresse de la variable age  (qui est de type int  ),
 alors mon pointeur doit être de type int*  !
Si ma variable age avait été de type double  , alors j'aurais dû écrire double *monPointeur  .

Le mot clé STATIC sur une variable au sein d'une fonction l'empêche d'être détruite(comportement normal) à la
fin de la fonction. Donc si la fonction est répéter il y aura une incrémentation (dans le cas d'une fonction qui effectue une opération somme) plutot qu'une répétion (sans STATIC)


Les contantes prédéfines & Les directives préprocesseurs signifie en faite préexécution sur le reste programme. grace au # les instruction sont exécuté avant tout. On le qualifide de préCPU car # sert à effectuer une substituton et n'est pas compilé.

Rendre son code source modulaire ça veut dire le diviser (avec plusieurs *.C et *.H), le rendre le plus clair possible.

Commençons par ajouter un fichier *.C qui contiendra seulement la fonction triple comme ci-dessous.

Notez que dans main.c j'ai l'habitude de garder que la fonction main.

Pour allouer dynamiquement en C++, on utilisera l’opérateur new.
Celui-ci renvoyant une adresse où est crée la variable en question, il
nous faudra un pointeur pour la conserver.
Manipuler ce pointeur, reviendra à manipuler la variable allouée
dynamiquement.
Pour libérer de la mémoire allouée dynamiquement en C++, on
utilisera l’opérateur delete.



int *monPointeur = NULL;
Là, vous avez un pointeur initialisé à NULL  . Comme ça, vous saurez dans la suite de votre programme que votre pointeur ne contient aucune adresse.
Que se passe-t-il ?
Ce code va réserver une case en mémoire comme si vous aviez créé une variable normale.
Cependant, et c'est ce qui change, la valeur du pointeur est faite pour contenir une adresse. L'adresse… d'une autre variable.
Vous savez maintenant comment indiquer l'adresse d'une variable (au lieu de sa valeur) en utilisant le symbole &  ,































